version: '3.0'

networks:
  app:
    driver: bridge

volumes:
  neo4j-data:
    driver: local
  postgresql-data:
    driver: local
  redis-data:
    driver: local

services:
  frontend:
    build: ../frontend/
    networks:
      app:
    restart: on-failure
    ports:
      - '8080:8080'
    environment:
      BACKEND_HOST: ${BACKEND_HOST}

  backend:
    build: ../backend
    networks:
      app:
    deploy:
      mode: replicated
      replicas: 3
    restart: on-failure
    depends_on:
      - postgresql
      - neo4j
      - redis
    ports:
      - "8080"
    environment:
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  neo4j:
    image: neo4j:5.17.0
    networks:
      app:
    volumes:
      - neo4j-data:/var/lib/neo4j/data
    environment:
      NEO4J_AUTH: "${NEO4J_USER}/${NEO4J_PASSWORD}"

  postgresql:
    image: postgres:16.2
    networks:
      app:
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}

  redis:
    image: redis:7.2.4
    networks:
      app:
    volumes:
      - redis-data:/var/lib/redis/data
    ports:
      - '6379:6379'
      - '8001:8001'
